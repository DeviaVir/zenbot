#!/usr/bin/env node
var version = require('../package.json').version
ZENBOT_USER_AGENT = 'zenbot/' + version
var constants = require('../conf/constants.json')

var launch = require('../utils/launch')

var program = require('commander')
  .option('--silent', 'speak no evil')
  .version(version)

program
  .command('record')
  .description('1. run the recorder')
  .option('--tweet', 'live tweet big buys/sells')
  .action(function (options) {
    launch('recorder', options)
  })

program
  .command('backfill')
  .description('2. run the backfiller')
  .option('--after <after>', 'trade sequence id to backfill after')
  .action(function (options) {
    launch('backfiller', options)
  })

program
  .command('learn')
  .description('3. run the machine learner')
  .option('-s, --start <time>', 'start time of simulation, default: 90 days ago')
  .option('-d, --duration <seconds>', 'learning duration in seconds')
  .option('-c, --concurrency <int>', 'number of concurrent simulations', Number, require('os').cpus().length)
  .option('-t, --throttle <load>', 'pause the simulation if load average goes above this', Number, 10)
  .option('-l, --learner <string>', 'id string of the learner node')
  .option('--share <url>', 'share strategies')
  .action(function (options) {
    launch('learner', options)
  })

program
  .command('mem')
  .description('(optional) show zenbot\'s memory')
  .action(function (options) {
    launch('memory', options)
  })

program
  .command('forget')
  .description('(optional) forget learned stuff')
  .option('--learned', 'forget machine learning')
  .option('--rs', 'forget trade bot run-state')
  .action(function (options) {
    launch('forget', options)
  })

program
  .command('listen')
  .description('(optional) listen for new strategies')
  .option('-p, --port <port>', 'port to listen on. default: ' + constants.listen_port, Number, constants.listen_port)
  .action(function (options) {
    launch('server', options)
  })

var defaults = require('../conf/defaults.json')

program
  .command('sim')
  .description('(optional) run the simulator')
  .option('-s, --start <time>', 'start time of simulation, default: 90 days ago')
  .option('-t, --throttle <load>', 'pause the simulation if load average goes above this', Number, 10)
  .option('--min_vol <float>', 'volume trigger in asset, default: ' + defaults.min_vol, Number, defaults.min_vol)
  .option('--trade_amt <float>', 'trade amount float between 0 and 1, default: ' + defaults.trade_amt, Number, defaults.trade_amt)
  .option('--min_trade <asset>', 'minimum trade in asset, default: ' + defaults.min_trade, Number, defaults.min_trade)
  .option('--cooldown <int>', 'trigger cooldown integer, default: ' + defaults.cooldown, Number, defaults.cooldown)
  .option('--crash <float>', 'crash protection float, default: ' + defaults.crash, Number, defaults.crash)
  .option('--sell_for_less <float>', 'willingness to sell for less float, default: ' + defaults.sell_for_less, Number, defaults.sell_for_less)
  .option('--buy_for_more <float>', 'willingness to buy for more float, default: ' + defaults.buy_for_more, Number, defaults.buy_for_more)
  .option('--vol_reset <asset>', 'volume trigger reset in asset, default: ' + defaults.vol_reset, Number, defaults.vol_reset)
  .option('--sim_query_limit <int>', 'query limit integer, default: ' + defaults.sim_query_limit, Number, defaults.sim_query_limit)
  .option('--sim_start_balance <currency>', 'simulation start balance in currency, default: ' + defaults.sim_start_balance, Number, defaults.sim_start_balance)
  .action(function (options) {
    launch('simulator', options)
  })

program
  .command('run')
  .description('4. run zenbot on the exchange')
  .option('--trade', 'do actual trades')
  .option('--tweet', 'live tweet buys/sells and hourly reports')
  .option('--sim', 'simulate trading')
  .action(function (options) {
    launch('zen', options)
  })

program
  .command('*')
  .action(function (infile) {
    program.outputHelp()
    process.exit(1)
  })

program.parse(process.argv)

if (!program.rawArgs[2]) {
  program.outputHelp()
  process.exit(1)
}
