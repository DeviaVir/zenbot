#!/usr/bin/env node
var motley = require('motley')

var program = require('commander')
  .version(require('../package.json').version)

program
  .command('run')
  .description('run zenbot on the exchange (must run recorder also)')
  .option('--trade', 'do actual trades')
  .option('--tweet', 'live tweet buys/sells and hourly reports (requires extra config)')
  .option('--silent', 'run in silent mode')
  .action(function (options) {
    try {
      var app = motley({
        _ns: 'motley',
        _maps: [
          require('../_codemap'),
          require('motley-mongo')
        ],
        'conf.console{}': {
          silent: options.silent
        },
        '@hooks.mount': [
          '#hooks.ensureIndexes',
          '#db.mountCollections'
        ]
      })
    }
    catch (err) {
      exit(err)
    }

    function exit (err) {
      console.error(err)
      console.error(err.stack)
      process.exit(1)
    }

    app.mount(function (err) {
      if (err) exit(err)
      function onExit () {
        app.close(function (err) {
          if (err) exit(err)
          process.exit()
        })
      }
      process.once('SIGINT', onExit)
      process.once('SIGTERM', onExit)

      app.get('motley:bot.zen')({trade: options.trade, tweet: options.tweet})
    })
  })

program
  .command('sim')
  .description('run the simulator (must run backfiller first)')
  .option('--start <time>', 'start time of simulation')
  .option('--silent', 'run in silent mode')
  .action(function (options) {
    try {
      var app = motley({
        _ns: 'motley',
        _maps: [
          require('../_codemap'),
          require('motley-mongo')
        ],
        'conf.sim{}': {
          min_time: options.start || null
        },
        'conf.console{}': {
          silent: options.silent
        },
        '@hooks.mount': [
          '#hooks.ensureIndexes',
          '#db.mountCollections'
        ]
      })
    }
    catch (err) {
      exit(err)
    }

    function exit (err) {
      console.error(err)
      console.error(err.stack)
      process.exit(1)
    }

    app.mount(function (err) {
      if (err) exit(err)
      function onExit () {
        app.close(function (err) {
          if (err) exit(err)
          process.exit()
        })
      }
      process.once('SIGINT', onExit)
      process.once('SIGTERM', onExit)

      app.get('motley:bot.simulator')({start: options.start})
    })
  })

program
  .command('backfill')
  .description('run the backfiller')
  .option('--after <after>', 'trade sequence id to backfill after')
  .option('--silent', 'run in silent mode')
  .action(function (options) {
    try {
      var app = motley({
        _ns: 'motley',
        _maps: [
          require('../_codemap'),
          require('motley-mongo')
        ],
        'conf.console{}': {
          silent: options.silent
        },
        '@hooks.mount': [
          '#hooks.ensureIndexes',
          '#db.mountCollections'
        ]
      })
    }
    catch (err) {
      exit(err)
    }

    function exit (err) {
      console.error(err)
      console.error(err.stack)
      process.exit(1)
    }

    app.mount(function (err) {
      if (err) exit(err)
      function onExit () {
        app.close(function (err) {
          if (err) exit(err)
          process.exit()
        })
      }
      process.once('SIGINT', onExit)
      process.once('SIGTERM', onExit)

      app.get('motley:bot.backfiller')({after: options.after})
    })
  })

program
  .command('record')
  .description('run the recorder')
  .option('--silent', 'print all data')
  .action(function (options) {
    try {
      var app = motley({
        _ns: 'motley',
        _maps: [
          require('../_codemap'),
          require('motley-mongo')
        ],
        'conf.console{}': {
          silent: options.silent
        },
        '@hooks.mount': [
          '#hooks.ensureIndexes',
          '#db.mountCollections'
        ]
      })
    }
    catch (err) {
      exit(err)
    }

    function exit (err) {
      console.error(err)
      console.error(err.stack)
      process.exit(1)
    }

    app.mount(function (err) {
      if (err) exit(err)
      function onExit () {
        app.close(function (err) {
          if (err) exit(err)
          process.exit()
        })
      }
      process.once('SIGINT', onExit)
      process.once('SIGTERM', onExit)

      app.get('motley:bot.recorder')({})
    })
  })

program
  .command('*')
  .action(function (infile) {
    program.outputHelp()
    process.exit(1)
  })

program.parse(process.argv)

if (!program.rawArgs[2]) {
  program.outputHelp()
  process.exit(1)
}
